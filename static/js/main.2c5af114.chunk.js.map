{"version":3,"sources":["sarguna.jpg","kato.png","SargunaResume.pdf","Portfolio.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Portfolio","className","class","style","padding","src","my_pic","alt","width","display","alignItems","paddingBottom","textAlign","color","katomaran","href","target","rel","paddingRight","cursor","aria-hidden","type","resume","download","textDecoration","paddingLeft","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,mPCsD5BC,E,uKA9CP,OACI,yBACIC,UAAU,aAEV,yBAAKC,MAAM,QACP,yBAAKA,MAAM,wBAAwBC,MAAO,CAAEC,QAAS,QACjD,yBAAKC,IAAKC,IAAQC,IAAI,UAAUJ,MAAO,CAAEK,MAAO,YAGxD,yBAAKN,MAAM,QACP,yBAAKA,MAAM,yBACP,yBAAKC,MAAO,CAAEM,QAAS,OAAQC,WAAY,SAAUC,cAAe,SAChE,yBAAKR,MAAO,CAAEK,MAAO,MAAOI,UAAW,YACnC,wBAAIX,UAAU,QAAd,aACA,uBAAGC,MAAM,YAAYC,MAAO,CAAEU,MAAO,YAArC,6BAEJ,yBAAKV,MAAO,CAAEK,MAAO,MAAOC,QAAS,OAAQC,WAAY,WACrD,yBAAKP,MAAO,CAAEK,MAAO,MAAOI,UAAW,WACnC,yBAAKP,IAAKS,IAAWP,IAAI,eAAeN,UAAU,kBAEtD,uBAAGC,MAAM,YAAYC,MAAO,CAAEU,MAAO,YAArC,4BAGR,uBAAGZ,UAAU,SAAb,qJAKA,uBAAGc,KAAK,gCAAgCC,OAAO,SAC3CC,IAAI,sBAAsBd,MAAO,CAAEe,aAAc,OAAQC,OAAQ,UAAWN,MAAO,UACnF,uBAAGX,MAAM,eAAekB,cAAY,UAGxC,4BAAQC,KAAK,SAASnB,MAAM,mBACxB,uBAAGa,KAAMO,IAAQC,UAAQ,EAACpB,MAAO,CAAEU,MAAO,QAASW,eAAgB,SAAnE,WAEJ,uBAAGT,KAAK,wCAAwCC,OAAO,SAASC,IAAI,sBAAsBd,MAAO,CAAEsB,YAAa,OAAQN,OAAQ,UAAWN,MAAO,UAC9I,uBAAGX,MAAM,iBAAiBkB,cAAY,iB,GAvC1CM,aCKTC,MANf,WACE,OACE,kBAAC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2c5af114.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sarguna.5a9c2d7d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/kato.7a474994.png\";","module.exports = __webpack_public_path__ + \"static/media/SargunaResume.c0e905e6.pdf\";","import React, { Component } from 'react'\nimport my_pic from \"./sarguna.jpg\";\nimport katomaran from \"./kato.png\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport resume from \"./SargunaResume.pdf\"\n\nclass Portfolio extends Component {\n    render() {\n        return (\n            <div\n                className=\"card_body\"\n            >\n                <div class=\"card\">\n                    <div class=\"card-body text-center\" style={{ padding: \"0px\" }}>\n                        <img src={my_pic} alt='Profile' style={{ width: \"100%\" }}></img>\n                    </div>\n                </div>\n                <div class=\"card\">\n                    <div class=\"card-body text-center\">\n                        <div style={{ display: \"flex\", alignItems: \"center\", paddingBottom: \"20px\" }}>\n                            <div style={{ width: \"50%\", textAlign: \"initial\" }}>\n                                <h2 className=\"name\">Sarguna K</h2>\n                                <p class=\"card-text\" style={{ color: \"#847d7d\" }}>Senior Software Engineer</p>\n                            </div>\n                            <div style={{ width: \"50%\", display: \"flex\", alignItems: \"center\" }}>\n                                <div style={{ width: \"12%\", textAlign: \"center\" }}>\n                                    <img src={katomaran} alt='Company logo' className=\"company_logo\"></img>\n                                </div>\n                                <p class=\"card-text\" style={{ color: \"#847d7d\" }}>Katomaran Technologies</p>\n                            </div>\n                        </div>\n                        <p className=\"about\" >\n                            Active Learner, Loves to learn new technologies.\n                            Proficient in Full Stack Development .\n                            Passionate about implementing and launching new projects.\n                        </p>\n                        <a href=\"https://github.com/sarguna07/\" target=\"_blank\"\n                            rel='noopener noreferrer' style={{ paddingRight: \"15px\", cursor: \"pointer\", color: \"black\" }}>\n                            <i class=\"fa fa-github\" aria-hidden=\"true\">\n                            </i>\n                        </a>\n                        <button type=\"button\" class=\"btn btn-success\">\n                            <a href={resume} download style={{ color: \"white\", textDecoration: \"none\" }}>Resume</a>\n                        </button>\n                        <a href=\"https://www.linkedin.com/in/sarguna-k\" target=\"_blank\" rel='noopener noreferrer' style={{ paddingLeft: \"15px\", cursor: \"pointer\", color: \"black\" }}>\n                            <i class=\"fa fa-linkedin\" aria-hidden=\"true\">\n                            </i>\n                        </a>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\nexport default Portfolio;\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Portfolio from \"./Portfolio\";\n\nfunction App() {\n  return (\n    <Portfolio />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}